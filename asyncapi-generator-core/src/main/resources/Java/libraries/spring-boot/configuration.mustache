package {{package}}.config;

import {{package}}.model.*;

import java.util.HashMap;
import java.util.Map;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.apache.kafka.common.serialization.StringSerializer;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.annotation.EnableKafka;
import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;
import org.springframework.kafka.core.*;
import org.springframework.kafka.support.serializer.JsonDeserializer;
import org.springframework.kafka.support.serializer.JsonSerializer;

@EnableKafka
@Configuration
public class AsyncApiKafkaConfiguration {

    @Value("${app.kafka.bootstrap-address}")
    private String bootstrapAddress;

    // consumer

{{#channels}}
    {{#subscribe}}
        // {{name}}

        @Value("${app.kafka.consumer.{{name}}.bootstrap-address}")
        private String {{name}}ConsumerBootstrapAddress;

        @Value("${app.kafka.consumer.{{name}}.groupId}")
        private String {{name}}GroupId;

        @Bean
        public ConsumerFactory<{{message.kafkaMessageBinding.key.javaDataType}}, {{message.payload.javaDataType}}> {{name}}ConsumerFactory() {
            Map<String, Object> props = new HashMap<>();
            props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, {{name}}ConsumerBootstrapAddress);
            props.put(ConsumerConfig.GROUP_ID_CONFIG, {{name}}GroupId);
            props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, JsonDeserializer.class);
            props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, JsonDeserializer.class);
            props.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");
            props.put(JsonDeserializer.TRUSTED_PACKAGES, "*");
            return new DefaultKafkaConsumerFactory<>(props);
        }

        @Bean
        public ConcurrentKafkaListenerContainerFactory<{{message.kafkaMessageBinding.key.javaDataType}}, {{message.payload.javaDataType}}> {{name}}KafkaListenerContainerFactory() {
            ConcurrentKafkaListenerContainerFactory<{{message.kafkaMessageBinding.key.javaDataType}}, {{message.payload.javaDataType}}> factory =
            new ConcurrentKafkaListenerContainerFactory<>();
            factory.setConsumerFactory({{name}}ConsumerFactory());
            return factory;
        }

    {{/subscribe}}
{{/channels}}



    // producer

{{#channels}}
    {{#publish}}

        // {{name}}

        @Value("${app.kafka.producer.{{name}}.bootstrap-address}")
        private String {{name}}ProducerBootstrapAddress;

        @Value("${app.kafka.producer.{{name}}.default-topic}")
        private String {{name}}DefaultTopic;

        @Value("${app.kafka.producer.{{name}}.security.protocol:#{null}}")
        private String {{name}}SecurityProtocol;

        @Value("${app.kafka.producer.{{name}}.security.sasl.mechanism:#{null}}")
        private String {{name}}SecuritySaslMechanism;

        @Value("${app.kafka.producer.{{name}}.key.serializerclass:#{null}}")
        private String {{name}}KeySerializerClass;

        @Bean
        public ProducerFactory<{{message.kafkaMessageBinding.key.javaDataType}}, {{message.payload.javaDataType}}> {{name}}ProducerFactory() {
            Map<String, Object> props = new HashMap<>();
            props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, {{name}}ProducerBootstrapAddress);
            props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, {{name}}KeySerializerClass != null ? {{name}}KeySerializerClass : JsonSerializer.class);
            props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);
            if ({{name}}SecurityProtocol != null || {{name}}SecuritySaslMechanism != null) {
                props.put("sasl.mechanism", {{name}}SecuritySaslMechanism);
                props.put("security.protocol", {{name}}SecurityProtocol);
            }
            return new DefaultKafkaProducerFactory<>(props);
        }

        @Bean
        @Qualifier("{{name}}")
        public KafkaTemplate<{{message.kafkaMessageBinding.key.javaDataType}}, {{message.payload.javaDataType}}> {{name}}KafkaTemplate() {
            KafkaTemplate<{{message.kafkaMessageBinding.key.javaDataType}}, {{message.payload.javaDataType}}> kafkaTemplate = new KafkaTemplate<>({{name}}ProducerFactory());
            kafkaTemplate.setDefaultTopic({{name}}DefaultTopic);
            return kafkaTemplate;
        }

    {{/publish}}
{{/channels}}

}
